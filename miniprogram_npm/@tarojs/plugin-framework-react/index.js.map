{"version":3,"sources":["index.js","dist/index.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.js","sourcesContent":["module.exports = require('./dist/index.js').default\nmodule.exports.default = module.exports\n","\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar acorn = require('acorn');\nvar walk = require('acorn-walk');\n\nfunction _interopNamespace(e) {\n  if (e && e.__esModule) return e;\n  var n = Object.create(null);\n  if (e) {\n    Object.keys(e).forEach(function (k) {\n      if (k !== 'default') {\n        var d = Object.getOwnPropertyDescriptor(e, k);\n        Object.defineProperty(n, k, d.get ? d : {\n          enumerable: true,\n          get: function () {\n            return e[k];\n          }\n        });\n      }\n    });\n  }\n  n['default'] = e;\n  return Object.freeze(n);\n}\n\nvar acorn__namespace = /*#__PURE__*/_interopNamespace(acorn);\nvar walk__namespace = /*#__PURE__*/_interopNamespace(walk);\n\nfunction addConfig(source) {\r\n    const configsMap = {\r\n        enableShareAppMessage: ['onShareAppMessage', 'useShareAppMessage'],\r\n        enableShareTimeline: ['onShareTimeline', 'useShareTimeline']\r\n    };\r\n    const ast = acorn__namespace.parse(source, {\r\n        ecmaVersion: 'latest',\r\n        sourceType: 'module'\r\n    });\r\n    const additionConfig = {};\r\n    function check(name) {\r\n        Object.keys(configsMap).forEach(configName => {\r\n            const apis = configsMap[configName];\r\n            if (apis.includes(name)) {\r\n                additionConfig[configName] = true;\r\n            }\r\n        });\r\n    }\r\n    walk__namespace.simple(ast, {\r\n        FunctionExpression(node) {\r\n            if (!node.id || !node.id.name)\r\n                return;\r\n            check(node.id.name);\r\n        },\r\n        FunctionDeclaration(node) {\r\n            if (!node.id || !node.id.name)\r\n                return;\r\n            check(node.id.name);\r\n        },\r\n        CallExpression(node) {\r\n            const { callee } = node;\r\n            if (callee.type === 'Identifier') {\r\n                check(callee.name);\r\n            }\r\n            else if (callee.type === 'MemberExpression') {\r\n                if (callee.property.type === 'Identifier') {\r\n                    check(callee.property.name);\r\n                }\r\n                else if (callee.property.type === 'Literal') {\r\n                    check(callee.property.value);\r\n                }\r\n            }\r\n        }\r\n    });\r\n    return additionConfig;\r\n}\r\nconst frameworkMeta = {\r\n    nerv: {\r\n        importFrameworkStatement: `\nimport Nerv from 'nervjs';\n`,\r\n        mockAppStatement: `\nclass App extends Nerv.Component {\n  render () {\n    return this.props.children\n  }\n}\n`,\r\n        frameworkArgs: 'Nerv, Nerv, config',\r\n        creator: 'createReactApp',\r\n        creatorLocation: '@tarojs/plugin-framework-react/dist/runtime',\r\n        importFrameworkName: 'Nerv',\r\n        modifyConfig(config, source) {\r\n            Object.assign(config, addConfig(source));\r\n        }\r\n    },\r\n    react: {\r\n        importFrameworkStatement: `\nimport * as React from 'react'\nimport ReactDOM from 'react-dom'\n`,\r\n        mockAppStatement: `\nclass App extends React.Component {\n  render () {\n    return this.props.children\n  }\n}\n`,\r\n        frameworkArgs: 'React, ReactDOM, config',\r\n        creator: 'createReactApp',\r\n        creatorLocation: '@tarojs/plugin-framework-react/dist/runtime',\r\n        importFrameworkName: 'React',\r\n        compatComponentImport: 'import { PullDownRefresh } from \"@tarojs/components\"',\r\n        compatComponentExtra: 'config.PullDownRefresh = PullDownRefresh',\r\n        modifyConfig(config, source) {\r\n            Object.assign(config, addConfig(source));\r\n        }\r\n    }\r\n};\r\nfunction getLoaderMeta(framework) {\r\n    if (framework === 'preact')\r\n        framework = 'react';\r\n    return frameworkMeta[framework];\r\n}\n\nfunction modifyMiniWebpackChain(ctx, framework, chain) {\r\n    setAlias$2(ctx, framework, chain);\r\n    setLoader$1(framework, chain);\r\n}\r\nfunction setAlias$2(ctx, framework, chain) {\r\n    var _a;\r\n    const config = ctx.initialConfig;\r\n    const alias = chain.resolve.alias;\r\n    if (framework === 'react') {\r\n        alias.set('react-dom$', '@tarojs/react');\r\n        if (process.env.NODE_ENV !== 'production' && ((_a = config.mini) === null || _a === void 0 ? void 0 : _a.debugReact) !== true) {\r\n            // 不是生产环境，且没有设置 debugReact，则使用压缩版本的 react 依赖，减少体积\r\n            alias.set('react-reconciler$', 'react-reconciler/cjs/react-reconciler.production.min.js');\r\n            alias.set('react$', 'react/cjs/react.production.min.js');\r\n            alias.set('scheduler$', 'scheduler/cjs/scheduler.production.min.js');\r\n            alias.set('react/jsx-runtime$', 'react/cjs/react-jsx-runtime.production.min.js');\r\n        }\r\n    }\r\n}\r\nfunction setLoader$1(framework, chain) {\r\n    chain.plugin('miniPlugin')\r\n        .tap(args => {\r\n        args[0].loaderMeta = getLoaderMeta(framework);\r\n        return args;\r\n    });\r\n}\n\nfunction modifyH5WebpackChain(ctx, framework, chain) {\r\n    setAlias$1(ctx, chain);\r\n    setLoader(framework, chain);\r\n    setPlugin(ctx, framework, chain);\r\n    chain.merge({\r\n        module: {\r\n            rule: {\r\n                'process-import-taro': {\r\n                    test: /taro-h5[\\\\/]dist[\\\\/]index/,\r\n                    loader: require.resolve('./api-loader')\r\n                }\r\n            }\r\n        }\r\n    });\r\n}\r\nfunction setAlias$1(ctx, chain) {\r\n    var _a;\r\n    const config = ctx.initialConfig;\r\n    const alias = chain.resolve.alias;\r\n    if ((_a = config.h5) === null || _a === void 0 ? void 0 : _a.useHtmlComponents) {\r\n        alias.set('@tarojs/components$', '@tarojs/components-react/index');\r\n    }\r\n    else {\r\n        alias.set('@tarojs/components$', '@tarojs/components/dist-h5/react');\r\n    }\r\n}\r\nfunction setLoader(framework, chain) {\r\n    chain.plugin('mainPlugin')\r\n        .tap(args => {\r\n        args[0].loaderMeta = getLoaderMeta(framework);\r\n        return args;\r\n    });\r\n}\r\nfunction setPlugin(ctx, framework, chain) {\r\n    var _a, _b;\r\n    const config = ctx.initialConfig;\r\n    if (process.env.NODE_ENV !== 'production' &&\r\n        ((_b = (_a = config.h5) === null || _a === void 0 ? void 0 : _a.devServer) === null || _b === void 0 ? void 0 : _b.hot) !== false) {\r\n        // 默认开启 fast-refresh\r\n        if (framework === 'react') {\r\n            chain\r\n                .plugin('fastRefreshPlugin')\r\n                .use(require('@pmmmwh/react-refresh-webpack-plugin'));\r\n        }\r\n        else if (framework === 'preact') {\r\n            chain\r\n                .plugin('fastRefreshPlugin')\r\n                .use(require('@prefresh/webpack'));\r\n        }\r\n    }\r\n}\n\nvar index = (ctx) => {\r\n    const { framework } = ctx.initialConfig;\r\n    if (framework !== 'react' && framework !== 'nerv' && framework !== 'preact')\r\n        return;\r\n    ctx.modifyWebpackChain(({ chain }) => {\r\n        // 通用\r\n        setAlias(framework, chain);\r\n        chain\r\n            .plugin('definePlugin')\r\n            .tap(args => {\r\n            const config = args[0];\r\n            config.__TARO_FRAMEWORK__ = `\"${framework}\"`;\r\n            return args;\r\n        });\r\n        if (process.env.TARO_ENV === 'h5') {\r\n            // H5\r\n            modifyH5WebpackChain(ctx, framework, chain);\r\n        }\r\n        else {\r\n            // 小程序\r\n            modifyMiniWebpackChain(ctx, framework, chain);\r\n        }\r\n    });\r\n};\r\nfunction setAlias(framework, chain) {\r\n    const alias = chain.resolve.alias;\r\n    switch (framework) {\r\n        case 'preact':\r\n            alias.set('react', 'preact/compat');\r\n            alias.set('react-dom/test-utils', 'preact/test-utils');\r\n            alias.set('react-dom', 'preact/compat');\r\n            alias.set('react/jsx-runtime', 'preact/jsx-runtime');\r\n            break;\r\n        case 'nerv':\r\n            alias.set('react$', 'nervjs');\r\n            alias.set('react-dom$', 'nervjs');\r\n            break;\r\n    }\r\n}\n\nexports['default'] = index;\n//# sourceMappingURL=index.js.map\n"]}