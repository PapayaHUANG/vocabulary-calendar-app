{"version":3,"sources":["index.js","utils/createTemplate.js","utils/injectEntry.js","utils/constants.js","utils/Runtime.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;AACA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,AGTA,AFMA,ACHA;AFOA,AGTA,AFMA,ACHA;AFOA,AGTA,AFMA,ACHA;AFOA,AIZA,ADGA,AFMA,ACHA;AFOA,AIZA,ADGA,AFMA,ACHA;AFOA,AIZA,ADGA,AFMA,ACHA;AFOA,AIZA,ADGA,AFMA,ACHA;AFOA,AIZA,ADGA,AFMA,ACHA;AFOA,AIZA,ADGA,AFMA,ACHA;AFOA,AIZA,ADGA,AFMA,ACHA;AFOA,AIZA,ADGA,AFMA,ACHA;AFOA,AIZA,ADGA,AFMA,ACHA;AFOA,AIZA,ADGA,AFMA,ACHA;AFOA,AIZA,ADGA,AFMA,ACHA;AFOA,AIZA,ADGA,AFMA,ACHA;AFOA,AIZA,ADGA,AFMA,ACHA;AFOA,AIZA,ADGA,AFMA,ACHA;AFOA,AIZA,ADGA,AFMA,ACHA;AFOA,AIZA,ADGA,AFMA,ACHA;AFOA,AIZA,ADGA,AFMA,ACHA;AFOA,AIZA,ADGA,AFMA,ACHA;AFOA,AIZA,ADGA,AFMA,ACHA;AFOA,AIZA,ADGA,AFMA,ACHA;AFOA,AIZA,ADGA,AFMA,ACHA;AFOA,AIZA,ADGA,AFMA,ACHA;AFOA,AIZA,ADGA,AFMA,ACHA;AFOA,AIZA,ADGA,AFMA,ACHA;AFOA,AIZA,ADGA,AFMA,ACHA;AFOA,AIZA,ADGA,AFMA;ADIA,AIZA,ADGA,AFMA;ADIA,AIZA,ADGA,AFMA;ADIA,AIZA,ADGA,AFMA;ADIA,AIZA,ADGA,AFMA;ADIA,AIZA,ADGA,AFMA;ADIA,AIZA,ADGA,AFMA;ADIA,AIZA,AHSA;ADIA,AIZA,AHSA;ADIA,AIZA,AHSA;ADIA,AIZA,AHSA;ADIA,AIZA,AHSA;ADIA,AIZA,AHSA;ADIA,AIZA,AHSA;ADIA,AIZA,AHSA;ADIA,AIZA,AHSA;ADIA,AIZA,AHSA;ADIA,AIZA,AHSA;ADIA,AIZA,AHSA;ADIA,AIZA,AHSA;ADIA,AIZA,AHSA;ADIA,AIZA,AHSA;ADIA,AIZA,AHSA;ADIA,AIZA,AHSA;ADIA,AIZA,AHSA;ADIA,AIZA,AHSA;ADIA,AIZA,AHSA;ADIA,AIZA,AHSA;ADIA,AIZA,AHSA;ADIA,AIZA,AHSA;ADIA,AIZA,AHSA;ADIA,AIZA,AHSA;ADIA,AIZA,AHSA;ADIA,AIZA,AHSA;ADIA,AIZA,AHSA;ADIA,AIZA,AHSA;ADIA,AIZA,AHSA;ADIA,AIZA,AHSA;ADIA,ACHA;ADIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.js","sourcesContent":["const webpack = require('webpack');\r\nconst path = require('path');\r\nconst { createRefreshTemplate } = require('./utils/createTemplate');\r\nconst { injectEntry } = require('./utils/injectEntry');\r\nconst {\r\n  prefreshUtils,\r\n  NAME,\r\n  matcherOptions,\r\n  nextMatcherOptions,\r\n  injectRefreshFunctions,\r\n} = require('./utils/constants');\r\n\r\nclass ReloadPlugin {\r\n  constructor(options) {\r\n    this.matcher = webpack.ModuleFilenameHelpers.matchObject.bind(\r\n      undefined,\r\n      options && options.runsInNextJs ? nextMatcherOptions : matcherOptions\r\n    );\r\n\r\n    this.options = {\r\n      overlay: options && options.overlay,\r\n      runsInNextJs: Boolean(options && options.runsInNextJs),\r\n    };\r\n  }\r\n\r\n  webpack4(compiler) {\r\n    compiler.hooks.normalModuleFactory.tap(NAME, nmf => {\r\n      nmf.hooks.afterResolve.tap(NAME, data => {\r\n        if (\r\n          this.matcher(data.resource) &&\r\n          !data.resource.includes('@prefresh') &&\r\n          !data.resource.includes(path.join(__dirname, './loader')) &&\r\n          !data.resource.includes(path.join(__dirname, './utils'))\r\n        ) {\r\n          data.loaders.unshift({\r\n            loader: require.resolve('./loader'),\r\n            options: undefined,\r\n          });\r\n        }\r\n\r\n        return data;\r\n      });\r\n    });\r\n\r\n    compiler.hooks.compilation.tap(NAME, compilation => {\r\n      injectRefreshFunctions(compilation);\r\n      compilation.mainTemplate.hooks.require.tap(NAME, (source, chunk, hash) =>\r\n        createRefreshTemplate(\r\n          source,\r\n          chunk,\r\n          hash,\r\n          compilation.mainTemplate,\r\n          this.options\r\n        )\r\n      );\r\n    });\r\n  }\r\n\r\n  webpack5(compiler, RuntimeGlobals) {\r\n    const createPrefreshRuntimeModule = require('./utils/Runtime');\r\n    const PrefreshRuntimeModule = createPrefreshRuntimeModule(\r\n      compiler.webpack ? compiler.webpack : webpack\r\n    );\r\n\r\n    compiler.hooks.compilation.tap(\r\n      NAME,\r\n      (compilation, { normalModuleFactory }) => {\r\n        if (compilation.compiler !== compiler) {\r\n          return;\r\n        }\r\n\r\n        injectRefreshFunctions(compilation);\r\n\r\n        compilation.hooks.additionalTreeRuntimeRequirements.tap(\r\n          NAME,\r\n          (chunk, runtimeRequirements) => {\r\n            runtimeRequirements.add(RuntimeGlobals.interceptModuleExecution);\r\n            compilation.addRuntimeModule(chunk, new PrefreshRuntimeModule());\r\n          }\r\n        );\r\n\r\n        normalModuleFactory.hooks.afterResolve.tap(\r\n          NAME,\r\n          ({ createData: data }) => {\r\n            if (\r\n              this.matcher(data.resource) &&\r\n              !data.resource.includes('@prefresh') &&\r\n              !data.resource.includes(path.join(__dirname, './loader')) &&\r\n              !data.resource.includes(path.join(__dirname, './utils'))\r\n            ) {\r\n              data.loaders.unshift({\r\n                loader: require.resolve('./loader'),\r\n                options: undefined,\r\n              });\r\n            }\r\n          }\r\n        );\r\n      }\r\n    );\r\n  }\r\n\r\n  apply(compiler) {\r\n    if (\r\n      process.env.NODE_ENV === 'production' ||\r\n      compiler.options.mode === 'production'\r\n    )\r\n      return;\r\n\r\n    const internalWebpackVersion = Number(\r\n      compiler.webpack ? compiler.webpack.version[0] : 4\r\n    );\r\n    const externalWebpackVersion = Number(webpack.version[0]);\r\n\r\n    if (!externalWebpackVersion) {\r\n      throw new Error(\r\n        `Missing webpack Dependency, try installing webpack@${\r\n          compiler.webpack ? compiler.webpack.version : 4\r\n        } locally.`\r\n      );\r\n    }\r\n\r\n    if (internalWebpackVersion !== externalWebpackVersion) {\r\n      throw new Error(`\r\n        Next is using webpack-version ${internalWebpackVersion} and you have ${externalWebpackVersion} installed.\r\n\r\n        Try installing ${\r\n          compiler.webpack ? compiler.webpack.version : 4\r\n        } locally.\r\n        Or if you want to try webpack 5 you can turn this on with { future: { webpack5:true } } in you next.config.js.\r\n      `);\r\n    }\r\n\r\n    let provide = {\r\n      [prefreshUtils]: require.resolve('./utils/prefresh'),\r\n    };\r\n\r\n    if (this.options.overlay) {\r\n      provide.__prefresh_errors__ = require.resolve(\r\n        this.options.overlay.module\r\n      );\r\n    }\r\n\r\n    const providePlugin = new webpack.ProvidePlugin(provide);\r\n    providePlugin.apply(compiler);\r\n\r\n    switch (Number(webpack.version[0])) {\r\n      case 4: {\r\n        compiler.options.entry = injectEntry(compiler.options.entry);\r\n        this.webpack4(compiler);\r\n        break;\r\n      }\r\n      case 5: {\r\n        const dependency = webpack.EntryPlugin.createDependency(\r\n          '@prefresh/core',\r\n          { name: '@prefresh/core' }\r\n        );\r\n        compiler.hooks.make.tapAsync(NAME, (compilation, callback) => {\r\n          compilation.addEntry(\r\n            compiler.context,\r\n            dependency,\r\n            undefined,\r\n            callback\r\n          );\r\n        });\r\n\r\n        this.webpack5(\r\n          compiler,\r\n          compiler.webpack\r\n            ? compiler.webpack.RuntimeGlobals\r\n            : webpack.RuntimeGlobals\r\n        );\r\n        break;\r\n      }\r\n      default: {\r\n        throw new Error('Unsupported webpack version.');\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nReloadPlugin.supportsNextJs = true;\r\n\r\nmodule.exports = ReloadPlugin;\r\n","const { Template } = require('webpack');\r\n\r\nconst NAMESPACE = '__PREFRESH__';\r\n\r\nconst beforeModule = `\r\nvar prevRefreshReg = self.$RefreshReg$;\r\nvar prevRefreshSig = self.$RefreshSig$;\r\n\r\nself.$RefreshSig$ = function() {\r\n  var status = 'begin';\r\n  var savedType;\r\n  return function(type, key, forceReset, getCustomHooks) {\r\n    if (!savedType) savedType = type;\r\n    status = self.${NAMESPACE}.sign(type || savedType, key, forceReset, getCustomHooks, status);\r\n    return type;\r\n  };\r\n};\r\n\r\nself.$RefreshReg$ = function(type, id) {\r\n  self.${NAMESPACE}.register(type, module.id + ' ' + id);\r\n};\r\n\r\ntry {\r\n`;\r\n\r\nconst afterModule = `\r\n} finally {\r\n  self.$RefreshReg$ = prevRefreshReg;\r\n  self.$RefreshSig$ = prevRefreshSig;\r\n}\r\n`;\r\n\r\nfunction createRefreshTemplate(source, chunk, hash, mainTemplate, options) {\r\n  let filename = mainTemplate.outputOptions.filename;\r\n  if (typeof filename === 'function') {\r\n    filename = filename({\r\n      chunk,\r\n      hash,\r\n      contentHashType: 'javascript',\r\n      hashWithLength: length =>\r\n        mainTemplate.renderCurrentHashCode(hash, length),\r\n      noChunkHash: mainTemplate.useChunkHash(chunk),\r\n    });\r\n  }\r\n\r\n  if (!filename || !filename.includes('.js')) {\r\n    return source;\r\n  }\r\n\r\n  const lines = source.split('\\n');\r\n\r\n  // Webpack generates this line whenever the mainTemplate is called\r\n  const moduleInitializationLineNumber = lines.findIndex(line =>\r\n    options.runsInNextJs\r\n      ? line.includes('modules[moduleId].call(')\r\n      : line.startsWith('modules[moduleId].call')\r\n  );\r\n\r\n  if (moduleInitializationLineNumber === -1) {\r\n    return source;\r\n  }\r\n\r\n  return Template.asString([\r\n    ...lines.slice(0, moduleInitializationLineNumber),\r\n    beforeModule,\r\n    Template.indent(lines[moduleInitializationLineNumber]),\r\n    afterModule,\r\n    ...lines.slice(moduleInitializationLineNumber + 1, lines.length),\r\n  ]);\r\n}\r\n\r\nexports.createRefreshTemplate = createRefreshTemplate;\r\n","const injectEntry = originalEntry => {\r\n  const entryInjects = [require.resolve('@prefresh/core')];\r\n\r\n  if (typeof originalEntry === 'string') {\r\n    return [...entryInjects, originalEntry];\r\n  }\r\n\r\n  if (Array.isArray(originalEntry)) {\r\n    return [...entryInjects, ...originalEntry];\r\n  }\r\n\r\n  if (typeof originalEntry === 'object') {\r\n    return Object.entries(originalEntry).reduce(\r\n      (acc, [curKey, curEntry]) => ({\r\n        ...acc,\r\n        [curKey]: injectEntry(curEntry),\r\n      }),\r\n      {}\r\n    );\r\n  }\r\n\r\n  if (typeof originalEntry === 'function') {\r\n    return (...args) =>\r\n      Promise.resolve(originalEntry(...args)).then(injectEntry);\r\n  }\r\n\r\n  throw new Error(\"Can't detect valid entry point.\");\r\n};\r\n\r\nexports.injectEntry = injectEntry;\r\n","const { Template } = require('webpack');\r\n\r\nexports.prefreshUtils = '__prefresh_utils__';\r\nexports.NAME = 'PrefreshWebpackPlugin';\r\n\r\nexports.matcherOptions = {\r\n  include: /\\.([jt]sx?)$/,\r\n  exclude: /node_modules/,\r\n};\r\n\r\nexports.nextMatcherOptions = {\r\n  include: /\\.([jt]sx?)$/,\r\n  exclude: /node_modules/,\r\n};\r\n\r\nexports.injectRefreshFunctions = function (compilation) {\r\n  const hookVars = compilation.mainTemplate.hooks.localVars;\r\n\r\n  hookVars.tap('ReactFreshWebpackPlugin', source =>\r\n    Template.asString([\r\n      source,\r\n      '',\r\n      '// noop fns to prevent runtime errors during initialization',\r\n      'if (typeof self !== \"undefined\") {',\r\n      Template.indent('self.$RefreshReg$ = function () {};'),\r\n      Template.indent('self.$RefreshSig$ = function () {'),\r\n      Template.indent(Template.indent('return function (type) {')),\r\n      Template.indent(Template.indent(Template.indent('return type;'))),\r\n      Template.indent(Template.indent('};')),\r\n      Template.indent('};'),\r\n      '}',\r\n    ])\r\n  );\r\n};\r\n","const NAMESPACE = '__PREFRESH__';\r\n\r\nconst beforeModule = `\r\nself.$RefreshSig$ = function() {\r\n  var status = 'begin';\r\n  var savedType;\r\n\r\n  return function(type, key, forceReset, getCustomHooks) {\r\n    if (!savedType) savedType = type;\r\n    status = self.${NAMESPACE}.sign(type || savedType, key, forceReset, getCustomHooks, status);\r\n    return type;\r\n  }\r\n}\r\n`;\r\n\r\nconst createPrefreshRuntimeModule = webpack =>\r\n  class PrefreshRuntimeModule extends webpack.RuntimeModule {\r\n    constructor() {\r\n      super('prefresh', 5);\r\n    }\r\n\r\n    generate() {\r\n      const { runtimeTemplate } = this.compilation;\r\n      const declare = runtimeTemplate.supportsConst() ? 'const' : 'var';\r\n\r\n      return webpack.Template.asString([\r\n        `${\r\n          webpack.RuntimeGlobals.interceptModuleExecution\r\n        }.push(${runtimeTemplate.basicFunction('options', [\r\n          `${declare} originalFactory = options.factory;`,\r\n          `options.factory = ${runtimeTemplate.basicFunction(\r\n            'moduleObject, moduleExports, webpackRequire',\r\n            [\r\n              `${declare} prevRefreshReg = self.$RefreshReg$;`,\r\n              `${declare} prevRefreshSig = self.$RefreshSig$;`,\r\n              beforeModule,\r\n              `${declare} reg = ${runtimeTemplate.basicFunction(\r\n                'currentModuleId',\r\n                [\r\n                  'self.$RefreshReg$ = function(type, id) {',\r\n                  `self.${NAMESPACE}.register(type, currentModuleId + ' ' + id);`,\r\n                  '};',\r\n                ]\r\n              )}`,\r\n              'reg()',\r\n              'try {',\r\n              webpack.Template.indent(\r\n                'originalFactory.call(this, moduleObject, moduleExports, webpackRequire);'\r\n              ),\r\n              '} finally {',\r\n              webpack.Template.indent('self.$RefreshReg$ = prevRefreshReg;'),\r\n              webpack.Template.indent('self.$RefreshSig$ = prevRefreshSig;'),\r\n              '}',\r\n            ]\r\n          )}`,\r\n        ])})`,\r\n        '',\r\n      ]);\r\n    }\r\n  };\r\n\r\nmodule.exports = createPrefreshRuntimeModule;\r\n"]}